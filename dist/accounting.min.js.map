{"version":3,"file":"accounting.min.js","sources":["../node_modules/big.js/big.js","../lib/index.js"],"sourcesContent":["/*\r\n *  big.js v5.0.3\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  https://github.com/MikeMcl/big.js/LICENCE\r\n */\r\n;(function (GLOBAL) {\r\n  'use strict';\r\n  var Big,\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n    // The default values below must be integers within the stated ranges.\r\n\r\n    /*\r\n     * The maximum number of decimal places (DP) of the results of operations involving division:\r\n     * div and sqrt, and pow with negative exponents.\r\n     */\r\n    DP = 20,          // 0 to MAX_DP\r\n\r\n    /*\r\n     * The rounding mode (RM) used when rounding to the above decimal places.\r\n     *\r\n     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n     *  3  Away from zero.                                  (ROUND_UP)\r\n     */\r\n    RM = 1,             // 0, 1, 2 or 3\r\n\r\n    // The maximum value of DP and Big.DP.\r\n    MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n    // The maximum magnitude of the exponent argument to the pow method.\r\n    MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n    /*\r\n     * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n     * (JavaScript numbers: -7)\r\n     * -1000000 is the minimum recommended exponent value of a Big.\r\n     */\r\n    NE = -7,            // 0 to -1000000\r\n\r\n    /*\r\n     * The positive exponent (PE) at and above which toString returns exponential notation.\r\n     * (JavaScript numbers: 21)\r\n     * 1000000 is the maximum recommended exponent value of a Big.\r\n     * (This limit is not enforced or checked.)\r\n     */\r\n    PE = 21,            // 0 to 1000000\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n    // Error messages.\r\n    NAME = '[big.js] ',\r\n    INVALID = NAME + 'Invalid ',\r\n    INVALID_DP = INVALID + 'decimal places',\r\n    INVALID_RM = INVALID + 'rounding mode',\r\n    DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n    // The shared prototype object.\r\n    P = {},\r\n    UNDEFINED = void 0,\r\n    NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n  /*\r\n   * Create and return a Big constructor.\r\n   *\r\n   */\r\n  function _Big_() {\r\n\r\n    /*\r\n     * The Big constructor and exported function.\r\n     * Create and return a new instance of a Big number object.\r\n     *\r\n     * n {number|string|Big} A numeric value.\r\n     */\r\n    function Big(n) {\r\n      var x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n      // Duplicate.\r\n      if (n instanceof Big) {\r\n        x.s = n.s;\r\n        x.e = n.e;\r\n        x.c = n.c.slice();\r\n      } else {\r\n        parse(x, n);\r\n      }\r\n\r\n      /*\r\n       * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\r\n       * points to Object.\r\n       */\r\n      x.constructor = Big;\r\n    }\r\n\r\n    Big.prototype = P;\r\n    Big.DP = DP;\r\n    Big.RM = RM;\r\n    Big.NE = NE;\r\n    Big.PE = PE;\r\n    Big.version = '5.0.2';\r\n\r\n    return Big;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the number or string value passed to a Big constructor.\r\n   *\r\n   * x {Big} A Big number instance.\r\n   * n {number|string} A numeric value.\r\n   */\r\n  function parse(x, n) {\r\n    var e, i, nl;\r\n\r\n    // Minus zero?\r\n    if (n === 0 && 1 / n < 0) n = '-0';\r\n    else if (!NUMERIC.test(n += '')) throw Error(INVALID + 'number');\r\n\r\n    // Determine sign.\r\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n    // Decimal point?\r\n    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = n.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +n.slice(i + 1);\r\n      n = n.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = n.length;\r\n    }\r\n\r\n    nl = n.length;\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n    if (i == nl) {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    } else {\r\n\r\n      // Determine trailing zeros.\r\n      for (; nl > 0 && n.charAt(--nl) == '0';);\r\n      x.e = e - i - 1;\r\n      x.c = [];\r\n\r\n      // Convert string to array of digits without leading/trailing zeros.\r\n      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Round Big x to a maximum of dp decimal places using rounding mode rm.\r\n   * Called by stringify, P.div, P.round and P.sqrt.\r\n   *\r\n   * x {Big} The Big to round.\r\n   * dp {number} Integer, 0 to MAX_DP inclusive.\r\n   * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\r\n   * [more] {boolean} Whether the result of division was truncated.\r\n   */\r\n  function round(x, dp, rm, more) {\r\n    var xc = x.c,\r\n      i = x.e + dp + 1;\r\n\r\n    if (i < xc.length) {\r\n      if (rm === 1) {\r\n\r\n        // xc[i] is the digit after the digit that may be rounded up.\r\n        more = xc[i] >= 5;\r\n      } else if (rm === 2) {\r\n        more = xc[i] > 5 || xc[i] == 5 &&\r\n          (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\r\n      } else if (rm === 3) {\r\n        more = more || xc[i] !== UNDEFINED || i < 0;\r\n      } else {\r\n        more = false;\r\n        if (rm !== 0) throw Error(INVALID_RM);\r\n      }\r\n\r\n      if (i < 1) {\r\n        xc.length = 1;\r\n\r\n        if (more) {\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          x.e = -dp;\r\n          xc[0] = 1;\r\n        } else {\r\n\r\n          // Zero.\r\n          xc[0] = x.e = 0;\r\n        }\r\n      } else {\r\n\r\n        // Remove any digits after the required decimal places.\r\n        xc.length = i--;\r\n\r\n        // Round up?\r\n        if (more) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up.\r\n          for (; ++xc[i] > 9;) {\r\n            xc[i] = 0;\r\n            if (!i--) {\r\n              ++x.e;\r\n              xc.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; !xc[--i];) xc.pop();\r\n      }\r\n    } else if (rm < 0 || rm > 3 || rm !== ~~rm) {\r\n      throw Error(INVALID_RM);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of Big x in normal or exponential notation.\r\n   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n   *\r\n   * x {Big}\r\n   * id? {number} Caller id.\r\n   *         1 toExponential\r\n   *         2 toFixed\r\n   *         3 toPrecision\r\n   *         4 valueOf\r\n   * n? {number|undefined} Caller's argument.\r\n   * k? {number|undefined}\r\n   */\r\n  function stringify(x, id, n, k) {\r\n    var e, s,\r\n      Big = x.constructor,\r\n      z = !x.c[0];\r\n\r\n    if (n !== UNDEFINED) {\r\n      if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\r\n        throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\r\n      }\r\n\r\n      x = new Big(x);\r\n\r\n      // The index of the digit that may be rounded up.\r\n      n = k - x.e;\r\n\r\n      // Round?\r\n      if (x.c.length > ++k) round(x, n, Big.RM);\r\n\r\n      // toFixed: recalculate k as x.e may have changed if value rounded up.\r\n      if (id == 2) k = x.e + n + 1;\r\n\r\n      // Append zeros?\r\n      for (; x.c.length < k;) x.c.push(0);\r\n    }\r\n\r\n    e = x.e;\r\n    s = x.c.join('');\r\n    n = s.length;\r\n\r\n    // Exponential notation?\r\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\r\n      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n    // Normal notation.\r\n    } else if (e < 0) {\r\n      for (; ++e;) s = '0' + s;\r\n      s = '0.' + s;\r\n    } else if (e > 0) {\r\n      if (++e > n) for (e -= n; e--;) s += '0';\r\n      else if (e < n) s = s.slice(0, e) + '.' + s.slice(e);\r\n    } else if (n > 1) {\r\n      s = s.charAt(0) + '.' + s.slice(1);\r\n    }\r\n\r\n    return x.s < 0 && (!z || id == 4) ? '-' + s : s;\r\n  }\r\n\r\n\r\n  // Prototype/instance methods\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the absolute value of this Big.\r\n   */\r\n  P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return 1 if the value of this Big is greater than the value of Big y,\r\n   *       -1 if the value of this Big is less than the value of Big y, or\r\n   *        0 if they have the same value.\r\n  */\r\n  P.cmp = function (y) {\r\n    var isneg,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new x.constructor(y)).c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    isneg = i < 0;\r\n\r\n    // Compare exponents.\r\n    if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = -1; ++i < j;) {\r\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.div = function (y) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      a = x.c,                  // dividend\r\n      b = (y = new Big(y)).c,   // divisor\r\n      k = x.s == y.s ? 1 : -1,\r\n      dp = Big.DP;\r\n\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);\r\n\r\n    // Divisor is zero?\r\n    if (!b[0]) throw Error(DIV_BY_ZERO);\r\n\r\n    // Dividend is 0? Return +-0.\r\n    if (!a[0]) return new Big(k * 0);\r\n\r\n    var bl, bt, n, cmp, ri,\r\n      bz = b.slice(),\r\n      ai = bl = b.length,\r\n      al = a.length,\r\n      r = a.slice(0, bl),   // remainder\r\n      rl = r.length,\r\n      q = y,                // quotient\r\n      qc = q.c = [],\r\n      qi = 0,\r\n      d = dp + (q.e = x.e - y.e) + 1;    // number of digits of the result\r\n\r\n    q.s = k;\r\n    k = d < 0 ? 0 : d;\r\n\r\n    // Create version of divisor with leading zero.\r\n    bz.unshift(0);\r\n\r\n    // Add zeros to make remainder as long as divisor.\r\n    for (; rl++ < bl;) r.push(0);\r\n\r\n    do {\r\n\r\n      // n is how many times the divisor goes into current remainder.\r\n      for (n = 0; n < 10; n++) {\r\n\r\n        // Compare divisor and remainder.\r\n        if (bl != (rl = r.length)) {\r\n          cmp = bl > rl ? 1 : -1;\r\n        } else {\r\n          for (ri = -1, cmp = 0; ++ri < bl;) {\r\n            if (b[ri] != r[ri]) {\r\n              cmp = b[ri] > r[ri] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        // If divisor < remainder, subtract divisor from remainder.\r\n        if (cmp < 0) {\r\n\r\n          // Remainder can't be more than 1 digit longer than divisor.\r\n          // Equalise lengths using divisor with extra leading zero?\r\n          for (bt = rl == bl ? b : bz; rl;) {\r\n            if (r[--rl] < bt[rl]) {\r\n              ri = rl;\r\n              for (; ri && !r[--ri];) r[ri] = 9;\r\n              --r[ri];\r\n              r[rl] += 10;\r\n            }\r\n            r[rl] -= bt[rl];\r\n          }\r\n\r\n          for (; !r[0];) r.shift();\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Add the digit n to the result array.\r\n      qc[qi++] = cmp ? n : ++n;\r\n\r\n      // Update the remainder.\r\n      if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n      else r = [a[ai]];\r\n\r\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n    if (!qc[0] && qi != 1) {\r\n\r\n      // There can't be more than one zero.\r\n      qc.shift();\r\n      q.e--;\r\n    }\r\n\r\n    // Round?\r\n    if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);\r\n\r\n    return q;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n   */\r\n  P.eq = function (y) {\r\n    return !this.cmp(y);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n   * false.\r\n   */\r\n  P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.gte = function (y) {\r\n    return this.cmp(y) > -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n   */\r\n  P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var i, j, t, xlty,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xc = x.c.slice(),\r\n      xe = x.e,\r\n      yc = y.c,\r\n      ye = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n\r\n      // y is non-zero? x is non-zero? Or both are zero.\r\n      return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\r\n    }\r\n\r\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n    if (a = xe - ye) {\r\n\r\n      if (xlty = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (b = a; b--;) t.push(0);\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n        if (xc[b] != yc[b]) {\r\n          xlty = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xlty) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    /*\r\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n     * needs to start at yc.length.\r\n     */\r\n    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n    // Subtract yc from xc.\r\n    for (b = i; j > a;) {\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i];) xc[i] = 9;\r\n        --xc[i];\r\n        xc[j] += 10;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xc[--b] === 0;) xc.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] === 0;) {\r\n      xc.shift();\r\n      --ye;\r\n    }\r\n\r\n    if (!xc[0]) {\r\n\r\n      // n - n = +0\r\n      y.s = 1;\r\n\r\n      // Result must be zero.\r\n      xc = [ye = 0];\r\n    }\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n   */\r\n  P.mod = function (y) {\r\n    var ygtx,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    if (!y.c[0]) throw Error(DIV_BY_ZERO);\r\n\r\n    x.s = y.s = 1;\r\n    ygtx = y.cmp(x) == 1;\r\n    x.s = a;\r\n    y.s = b;\r\n\r\n    if (ygtx) return new Big(x);\r\n\r\n    a = Big.DP;\r\n    b = Big.RM;\r\n    Big.DP = Big.RM = 0;\r\n    x = x.div(y);\r\n    Big.DP = a;\r\n    Big.RM = b;\r\n\r\n    return this.minus(x.times(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e,\r\n      xc = x.c,\r\n      ye = y.e,\r\n      yc = y.c;\r\n\r\n    // Either zero? y is non-zero? x is non-zero? Or both are zero.\r\n    if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);\r\n\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    // Note: Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--;) t.push(0);\r\n      t.reverse();\r\n    }\r\n\r\n    // Point xc to the longer array.\r\n    if (xc.length - yc.length < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n    }\r\n\r\n    a = yc.length;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n    for (b = 0; a; xc[a] %= 10) b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n    if (b) {\r\n      xc.unshift(b);\r\n      ++ye;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (a = xc.length; xc[--a] === 0;) xc.pop();\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a Big whose value is the value of this Big raised to the power n.\r\n   * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n   * mode Big.RM.\r\n   *\r\n   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n   */\r\n  P.pow = function (n) {\r\n    var x = this,\r\n      one = new x.constructor(1),\r\n      y = one,\r\n      isneg = n < 0;\r\n\r\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + 'exponent');\r\n    if (isneg) n = -n;\r\n\r\n    for (;;) {\r\n      if (n & 1) y = y.times(x);\r\n      n >>= 1;\r\n      if (!n) break;\r\n      x = x.times(x);\r\n    }\r\n\r\n    return isneg ? one.div(y) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal\r\n   * places using rounding mode rm.\r\n   * If dp is not specified, round to 0 decimal places.\r\n   * If rm is not specified, use Big.RM.\r\n   *\r\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n   * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\r\n   */\r\n  P.round = function (dp, rm) {\r\n    var Big = this.constructor;\r\n    if (dp === UNDEFINED) dp = 0;\r\n    else if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);\r\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.sqrt = function () {\r\n    var r, c, t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      s = x.s,\r\n      e = x.e,\r\n      half = new Big(0.5);\r\n\r\n    // Zero?\r\n    if (!x.c[0]) return new Big(x);\r\n\r\n    // Negative?\r\n    if (s < 0) throw Error(NAME + 'No square root');\r\n\r\n    // Estimate.\r\n    s = Math.sqrt(x.toString());\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Re-estimate: pass x to Math.sqrt as integer, then adjust the result exponent.\r\n    if (s === 0 || s === 1 / 0) {\r\n      c = x.c.join('');\r\n      if (!(c.length + e & 1)) c += '0';\r\n      r = new Big(Math.sqrt(c).toString());\r\n      r.e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n    } else {\r\n      r = new Big(s.toString());\r\n    }\r\n\r\n    e = r.e + (Big.DP += 4);\r\n\r\n    // Newton-Raphson iteration.\r\n    do {\r\n      t = r;\r\n      r = half.times(t.plus(x.div(t)));\r\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n    return round(r, Big.DP -= 4, Big.RM);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big times the value of Big y.\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var c,\r\n      x = this,\r\n      Big = x.constructor,\r\n      xc = x.c,\r\n      yc = (y = new Big(y)).c,\r\n      a = xc.length,\r\n      b = yc.length,\r\n      i = x.e,\r\n      j = y.e;\r\n\r\n    // Determine sign of result.\r\n    y.s = x.s == y.s ? 1 : -1;\r\n\r\n    // Return signed 0 if either 0.\r\n    if (!xc[0] || !yc[0]) return new Big(y.s * 0);\r\n\r\n    // Initialise exponent of result as x.e + y.e.\r\n    y.e = i + j;\r\n\r\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n    if (a < b) {\r\n      c = xc;\r\n      xc = yc;\r\n      yc = c;\r\n      j = a;\r\n      a = b;\r\n      b = j;\r\n    }\r\n\r\n    // Initialise coefficient array of result with zeros.\r\n    for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n    // Multiply.\r\n\r\n    // i is initially xc.length.\r\n    for (i = b; i--;) {\r\n      b = 0;\r\n\r\n      // a is yc.length.\r\n      for (j = a + i; j > i;) {\r\n\r\n        // Current sum of products at this digit position, plus carry.\r\n        b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n        c[j--] = b % 10;\r\n\r\n        // carry\r\n        b = b / 10 | 0;\r\n      }\r\n\r\n      c[j] = (c[j] + b) % 10;\r\n    }\r\n\r\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n    if (b) ++y.e;\r\n    else c.shift();\r\n\r\n    // Remove trailing zeros.\r\n    for (i = c.length; !c[--i];) c.pop();\r\n    y.c = c;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in exponential notation to dp fixed decimal\r\n   * places and rounded using Big.RM.\r\n   *\r\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n   */\r\n  P.toExponential = function (dp) {\r\n    return stringify(this, 1, dp, dp);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in normal notation to dp fixed decimal\r\n   * places and rounded using Big.RM.\r\n   *\r\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   */\r\n  P.toFixed = function (dp) {\r\n    return stringify(this, 2, dp, this.e + dp);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big rounded to sd significant digits using\r\n   * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * sd {number} Integer, 1 to MAX_DP inclusive.\r\n   */\r\n  P.toPrecision = function (sd) {\r\n    return stringify(this, 3, sd, sd - 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Omit the sign for negative zero.\r\n   */\r\n  P.toString = function () {\r\n    return stringify(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Include the sign for negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return stringify(this, 4);\r\n  };\r\n\r\n\r\n  // Export\r\n\r\n\r\n  Big = _Big_();\r\n\r\n  Big['default'] = Big.Big = Big;\r\n\r\n  //AMD.\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function () { return Big; });\r\n\r\n  // Node and other CommonJS-like environments that support module.exports.\r\n  } else if (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = Big;\r\n\r\n  //Browser.\r\n  } else {\r\n    GLOBAL.Big = Big;\r\n  }\r\n})(this);\r\n","'use strict';\n\nimport Big from 'big.js';\nimport {version} from '../package.json';\n\n// Create the local library object, to be exported or referenced globally later\nvar lib = {};\n\n// Current version\nlib.version = version;\n\n\n/* --- Exposed settings --- */\n\n// The library's settings configuration object. Contains default parameters for\n// currency and number formatting\nlib.settings = {\n  currency: {\n    symbol : '$',   // default currency symbol is '$'\n    format : '%s%v',  // controls output: %s = symbol, %v = value (can be object, see docs)\n    decimal : '.',    // decimal point separator\n    thousand : ',',   // thousands separator\n    precision : 2,    // decimal places\n    grouping : 3    // digit grouping (not implemented yet)\n  },\n  number: {\n    precision : 0,    // default precision on numbers is 0\n    grouping : 3,   // digit grouping (not implemented yet)\n    thousand : ',',\n    decimal : '.'\n  }\n};\n\n\n/* --- Internal Helper Methods --- */\n\n// Store reference to possibly-available ECMAScript 5 methods for later\nvar nativeMap = Array.prototype.map,\n  nativeIsArray = Array.isArray,\n  toString = Object.prototype.toString;\n\n/**\n * Tests whether supplied parameter is a string\n * from underscore.js\n */\nfunction isString(obj) {\n  return !!(obj === '' || (obj && obj.charCodeAt && obj.substr));\n}\n\n/**\n * Tests whether supplied parameter is an array\n * from underscore.js, delegates to ECMA5's native Array.isArray\n */\nfunction isArray(obj) {\n  return nativeIsArray ? nativeIsArray(obj) : toString.call(obj) === '[object Array]';\n}\n\n/**\n * Tests whether supplied parameter is a true object\n */\nfunction isObject(obj) {\n  return obj && toString.call(obj) === '[object Object]';\n}\n\n/**\n * Extends an object with a defaults object, similar to underscore's _.defaults\n *\n * Used for abstracting parameter handling from API methods\n */\nfunction defaults(object, defs) {\n  var key;\n  object = object || {};\n  defs = defs || {};\n  // Iterate over object non-prototype properties:\n  for (key in defs) {\n    if (defs.hasOwnProperty(key)) {\n      // Replace values with defaults only if undefined (allow empty/zero values):\n      if (object[key] == null) object[key] = defs[key];\n    }\n  }\n  return object;\n}\n\n/**\n * Implementation of `Array.map()` for iteration loops\n *\n * Returns a new Array as a result of calling `iterator` on each array value.\n * Defers to native Array.map if available\n */\nfunction map(obj, iterator, context) {\n  var results = [], i, j;\n\n  if (!obj) return results;\n\n  // Use native .map method if it exists:\n  if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);\n\n  // Fallback for native .map:\n  for (i = 0, j = obj.length; i < j; i++ ) {\n    results[i] = iterator.call(context, obj[i], i, obj);\n  }\n  return results;\n}\n\n/**\n * Check and normalise the value of precision (must be positive integer)\n */\nfunction checkPrecision(val, base) {\n  val = Math.round(Math.abs(val));\n  return isNaN(val)? base : val;\n}\n\n\n/**\n * Parses a format string or object and returns format obj for use in rendering\n *\n * `format` is either a string with the default (positive) format, or object\n * containing `pos` (required), `neg` and `zero` values (or a function returning\n * either a string or object)\n *\n * Either string or format.pos must contain \"%v\" (value) to be valid\n */\nfunction checkCurrencyFormat(format) {\n  var defaults = lib.settings.currency.format;\n\n  // Allow function as format parameter (should return string or object):\n  if ( typeof format === 'function' ) format = format();\n\n  // Format can be a string, in which case `value` (\"%v\") must be present:\n  if ( isString( format ) && format.match('%v') ) {\n\n    // Create and return positive, negative and zero formats:\n    return {\n      pos : format,\n      neg : format.replace('-', '').replace('%v', '-%v'),\n      zero : format\n    };\n\n    // If no format, or object is missing valid positive value, use defaults:\n  } else if ( !format || !format.pos || !format.pos.match('%v') ) {\n\n    // If defaults is a string, casts it to an object for faster checking next time:\n    return ( !isString( defaults ) ) ? defaults : lib.settings.currency.format = {\n      pos : defaults,\n      neg : defaults.replace('%v', '-%v'),\n      zero : defaults\n    };\n\n  }\n  // Otherwise, assume format was fine:\n  return format;\n}\n\n\n/* --- API Methods --- */\n\n/**\n * Takes a string/array of strings, removes all formatting/cruft and returns the raw float value\n * Alias: `accounting.parseBig(string)`\n *\n * Decimal must be included in the regular expression to match floats (defaults to\n * accounting.settings.number.decimal), so if the number uses a non-standard decimal \n * separator, provide it as the second argument.\n *\n * Also matches bracketed negatives (eg. \"$ (1.99)\" => -1.99)\n *\n * Doesn't throw any errors (`NaN`s become 0) but this may change in future\n *\n * @return {Big}\n */\nfunction unformatBig(value, decimal) {\n  // Recursively unformat arrays:\n  if (isArray(value)) {\n    return map(value, function(val) {\n      return unformatBig(val, decimal);\n    });\n  }\n\n  // Fails silently (need decent errors):\n  value = value || 0;\n\n  // Return the value as-is if it's already a number:\n  try {\n    return new Big(value);\n  } catch(err) {}\n\n  // Default decimal point comes from settings, but could be set to eg. \",\" in opts:\n  decimal = decimal || lib.settings.number.decimal;\n\n  // Build regex to strip out everything except digits, decimal point and minus sign:\n  var regex = new RegExp('[^0-9-' + decimal + ']', ['g']);\n  var unformatted = `${value}`\n    .replace(/\\((?=\\d+)(.*)\\)/, '-$1') // replace bracketed values with negatives\n    .replace(regex, '')         // strip out any cruft\n    .replace(decimal, '.');      // make sure decimal point is standard\n\n  try {\n    return new Big(unformatted);\n  } catch (err) {\n    return new Big(0);\n  }\n}\n\nlib.unformatBig = unformatBig;\nlib.parseBig = unformatBig;\n\nfunction unformat(value, decimal) {\n  // Recursively unformat arrays:\n  if (isArray(value)) {\n    return map(value, function(val) {\n      return Number(unformatBig(val, decimal));\n    });\n  }\n\n  return Number(unformatBig(value, decimal));\n}\n\nlib.unformat = unformat;\nlib.parse = unformat;\n\n\n/**\n * Implementation of toFixed() that treats floats more like decimals\n *\n * Fixes binary rounding issues (eg. (0.615).toFixed(2) === \"0.61\") that present\n * problems for accounting- and finance-related software.\n */\nfunction toFixed(value, precision) {\n  precision = checkPrecision(precision, lib.settings.number.precision);\n\n  return unformatBig(value).toFixed(precision);\n}\n\nlib.toFixed = toFixed;\n\n/**\n * Format a number, with comma-separated thousands and custom precision/decimal places\n * Alias: `accounting.format()`\n *\n * Localise by overriding the precision and thousand / decimal separators\n * 2nd parameter `precision` can be an object matching `settings.number`\n */\nfunction formatNumber(number, precision, thousand, decimal) {\n  // Resursively format arrays:\n  if (isArray(number)) {\n    return map(number, function(val) {\n      return formatNumber(val, precision, thousand, decimal);\n    });\n  }\n\n  // Clean up number:\n  number = unformatBig(number);\n\n  // Build options object from second param (if object) or all params, extending defaults:\n  var opts = defaults(\n    (isObject(precision) ? precision : {\n      precision : precision,\n      thousand : thousand,\n      decimal : decimal\n    }),\n    lib.settings.number\n  );\n\n  // Clean up precision\n  var usePrecision = checkPrecision(opts.precision);\n\n  // Do some calc:\n  var negative = number.lt(0) ? '-' : '';\n  var numberParts = number.abs().toFixed(usePrecision).split('.');\n  var base = numberParts[0];\n\n  var result = negative;\n\n  // Add thousands commas\n  result = result + base.replace(/\\B(?=(\\d{3})+(?!\\d))/g, opts.thousand);\n\n  if (usePrecision) {\n    result += opts.decimal + numberParts[1];\n  }\n\n  return result;\n}\n\nlib.formatNumber = formatNumber;\nlib.format = formatNumber;\n\n\n/**\n * Format a number into currency\n *\n * Usage: accounting.formatMoney(number, symbol, precision, thousandsSep, decimalSep, format)\n * defaults: (0, \"$\", 2, \",\", \".\", \"%s%v\")\n *\n * Localise by overriding the symbol, precision, thousand / decimal separators and format\n * Second param can be an object matching `settings.currency` which is the easiest way.\n *\n * To do: tidy up the parameters\n */\nfunction formatMoney(number, symbol, precision, thousand, decimal, format) {\n  // Resursively format arrays:\n  if (isArray(number)) {\n    return map(number, function(val){\n      return formatMoney(val, symbol, precision, thousand, decimal, format);\n    });\n  }\n\n  // Clean up number:\n  number = unformatBig(number);\n\n  // Build options object from second param (if object) or all params, extending defaults:\n  var opts = defaults(\n    (isObject(symbol) ? symbol : {\n      symbol : symbol,\n      precision : precision,\n      thousand : thousand,\n      decimal : decimal,\n      format : format\n    }),\n    lib.settings.currency\n  );\n\n  // Check format (returns object with pos, neg and zero):\n  var formats = checkCurrencyFormat(opts.format);\n\n  // Choose which format to use for this value:\n  var useFormat = number.gt(0) ? formats.pos : number.lt(0) ? formats.neg : formats.zero;\n\n  // Return with currency symbol added:\n  return useFormat.replace('%s', opts.symbol).replace('%v', formatNumber(number.abs(), checkPrecision(opts.precision), opts.thousand, opts.decimal));\n}\n\nlib.formatMoney = formatMoney;\n\n\n/**\n * Format a list of numbers into an accounting column, padding with whitespace\n * to line up currency symbols, thousand separators and decimals places\n *\n * List should be an array of numbers\n * Second parameter can be an object containing keys that match the params\n *\n * Returns array of accouting-formatted number strings of same length\n *\n * NB: `white-space:pre` CSS rule is required on the list container to prevent\n * browsers from collapsing the whitespace in the output strings.\n */\nfunction formatColumn(list, symbol, precision, thousand, decimal, format) {\n  if (!list || !isArray(list)) return [];\n\n  // Build options object from second param (if object) or all params, extending defaults:\n  var opts = defaults(\n      (isObject(symbol) ? symbol : {\n        symbol : symbol,\n        precision : precision,\n        thousand : thousand,\n        decimal : decimal,\n        format : format\n      }),\n      lib.settings.currency\n    ),\n\n    // Check format (returns object with pos, neg and zero), only need pos for now:\n    formats = checkCurrencyFormat(opts.format),\n\n    // Whether to pad at start of string or after currency symbol:\n    padAfterSymbol = formats.pos.indexOf('%s') < formats.pos.indexOf('%v') ? true : false,\n\n    // Store value for the length of the longest string in the column:\n    maxLength = 0,\n\n    // Format the list according to options, store the length of the longest string:\n    formatted = map(list, function(val) {\n      if (isArray(val)) {\n        // Recursively format columns if list is a multi-dimensional array:\n        return lib.formatColumn(val, opts);\n      } else {\n        // Clean up the value\n        val = unformatBig(val);\n\n        // Choose which format to use for this value (pos, neg or zero):\n        var useFormat = val.gt(0) ? formats.pos : val.lt(0) ? formats.neg : formats.zero;\n\n        // Format this value, push into formatted list and save the length:\n        var fVal = useFormat.replace('%s', opts.symbol).replace('%v', formatNumber(val.abs(), checkPrecision(opts.precision), opts.thousand, opts.decimal));\n\n        if (fVal.length > maxLength) maxLength = fVal.length;\n        return fVal;\n      }\n    });\n\n  // Pad each number in the list and send back the column of numbers:\n  return map(formatted, function(val) {\n    // Only if this is a string (not a nested array, which would have already been padded):\n    if (isString(val) && val.length < maxLength) {\n      // Depending on symbol position, pad after symbol or at index 0:\n      return padAfterSymbol ? val.replace(opts.symbol, opts.symbol+(new Array(maxLength - val.length + 1).join(' '))) : (new Array(maxLength - val.length + 1).join(' ')) + val;\n    }\n    return val;\n  });\n}\n\nlib.formatColumn = formatColumn;\n\nexport default lib;\n"],"names":["GLOBAL","Big","DP","RM","MAX_DP","NE","PE","NAME","INVALID","INVALID_DP","INVALID_RM","P","UNDEFINED","NUMERIC","round","x","dp","rm","more","xc","c","i","e","length","Error","unshift","pop","stringify","id","n","k","s","constructor","z","push","join","charAt","slice","abs","this","cmp","y","isneg","yc","j","l","div","a","b","bl","bt","ri","bz","ai","al","r","rl","q","qc","qi","d","shift","eq","gt","gte","lt","lte","minus","sub","t","xlty","plus","xe","ye","reverse","mod","ygtx","times","add","pow","one","sqrt","half","Math","toString","mul","Array","toExponential","toFixed","toPrecision","sd","valueOf","toJSON","_Big_","nl","test","indexOf","replace","search","substring","parse","prototype","version","module","exports","lib","nativeMap","map","nativeIsArray","isArray","Object","isString","obj","charCodeAt","substr","call","isObject","defaults","object","defs","key","hasOwnProperty","iterator","context","results","checkPrecision","val","base","isNaN","checkCurrencyFormat","format","settings","currency","match","pos","unformatBig","value","decimal","err","number","regex","RegExp","unformatted","unformat","Number","formatNumber","precision","thousand","opts","usePrecision","negative","numberParts","split","result","parseBig","formatMoney","symbol","formats","neg","zero","formatColumn","list","fVal","maxLength","padAfterSymbol"],"mappings":"uTAAA,SAMYA,GAEV,IAAIC,EAYFC,EAAK,GAULC,EAAK,EAGLC,EAAS,IAUTC,GAAM,EAQNC,EAAK,GAOLC,EAAO,YACPC,EAAUD,EAAO,WACjBE,EAAaD,EAAU,iBACvBE,EAAaF,EAAU,gBAIvBG,KACAC,OAAY,EACZC,EAAU,uCAiHZ,SAASC,EAAMC,EAAGC,EAAIC,EAAIC,GACxB,IAAIC,EAAKJ,EAAEK,EACTC,EAAIN,EAAEO,EAAIN,EAAK,EAEjB,GAAIK,EAAIF,EAAGI,OAAQ,CACjB,GAAW,IAAPN,EAGFC,EAAOC,EAAGE,IAAM,OACX,GAAW,IAAPJ,EACTC,EAAOC,EAAGE,GAAK,GAAc,GAATF,EAAGE,KACpBH,GAAQG,EAAI,GAAKF,EAAGE,EAAI,KAAOT,GAAyB,EAAZO,EAAGE,EAAI,SACjD,GAAW,IAAPJ,EACTC,EAAOA,GAAQC,EAAGE,KAAOT,GAAaS,EAAI,OAG1C,GADAH,GAAO,EACI,IAAPD,EAAU,MAAMO,MAAMd,GAG5B,GAAIW,EAAI,EACNF,EAAGI,OAAS,EAERL,GAGFH,EAAEO,GAAKN,EACPG,EAAG,GAAK,GAIRA,EAAG,GAAKJ,EAAEO,EAAI,MAEX,CAML,GAHAH,EAAGI,OAASF,IAGRH,EAGF,OAASC,EAAGE,GAAK,GACfF,EAAGE,GAAK,EACHA,QACDN,EAAEO,EACJH,EAAGM,QAAQ,IAMjB,IAAKJ,EAAIF,EAAGI,QAASJ,IAAKE,IAAKF,EAAGO,YAE/B,GAAIT,EAAK,GAAKA,EAAK,GAAKA,MAASA,EACtC,MAAMO,MAAMd,GAGd,OAAOK,EAiBT,SAASY,EAAUZ,EAAGa,EAAIC,EAAGC,GAC3B,IAAIR,EAAGS,EACL9B,EAAMc,EAAEiB,YACRC,GAAKlB,EAAEK,EAAE,GAEX,GAAIS,IAAMjB,EAAW,CACnB,GAAIiB,MAAQA,GAAKA,GAAW,GAAND,IAAYC,EAAIzB,EACpC,MAAMoB,MAAY,GAANI,EAAUpB,EAAU,YAAcC,GAehD,IATAoB,EAAIC,GAHJf,EAAI,IAAId,EAAIc,IAGFO,EAGNP,EAAEK,EAAEG,SAAWO,GAAGhB,EAAMC,EAAGc,EAAG5B,EAAIE,IAG5B,GAANyB,IAASE,EAAIf,EAAEO,EAAIO,EAAI,GAGpBd,EAAEK,EAAEG,OAASO,GAAIf,EAAEK,EAAEc,KAAK,GAQnC,GALAZ,EAAIP,EAAEO,EAENO,GADAE,EAAIhB,EAAEK,EAAEe,KAAK,KACPZ,OAGI,GAANK,IAAkB,GAANA,GAAiB,GAANA,GAAWE,GAAKR,GAAKA,GAAKrB,EAAII,IAAMiB,GAAKrB,EAAIK,IACtEyB,EAAIA,EAAEK,OAAO,IAAMP,EAAI,EAAI,IAAME,EAAEM,MAAM,GAAK,KAAOf,EAAI,EAAI,IAAM,MAAQA,OAGtE,GAAIA,EAAI,EAAG,CAChB,OAASA,GAAIS,EAAI,IAAMA,EACvBA,EAAI,KAAOA,OACN,GAAIT,EAAI,EACb,KAAMA,EAAIO,EAAG,IAAKP,GAAKO,EAAGP,KAAMS,GAAK,SAC5BT,EAAIO,IAAGE,EAAIA,EAAEM,MAAM,EAAGf,GAAK,IAAMS,EAAEM,MAAMf,SACzCO,EAAI,IACbE,EAAIA,EAAEK,OAAO,GAAK,IAAML,EAAEM,MAAM,IAGlC,OAAOtB,EAAEgB,EAAI,KAAOE,GAAW,GAANL,GAAW,IAAMG,EAAIA,EAUhDpB,EAAE2B,IAAM,WACN,IAAIvB,EAAI,IAAIwB,KAAKP,YAAYO,MAE7B,OADAxB,EAAEgB,EAAI,EACChB,GASTJ,EAAE6B,IAAM,SAAUC,GAChB,IAAIC,EACF3B,EAAIwB,KACJpB,EAAKJ,EAAEK,EACPuB,GAAMF,EAAI,IAAI1B,EAAEiB,YAAYS,IAAIrB,EAChCC,EAAIN,EAAEgB,EACNa,EAAIH,EAAEV,EACND,EAAIf,EAAEO,EACNuB,EAAIJ,EAAEnB,EAGR,IAAKH,EAAG,KAAOwB,EAAG,GAAI,OAAQxB,EAAG,GAAuBE,EAAjBsB,EAAG,IAAUC,EAAL,EAG/C,GAAIvB,GAAKuB,EAAG,OAAOvB,EAKnB,GAHAqB,EAAQrB,EAAI,EAGRS,GAAKe,EAAG,OAAOf,EAAIe,EAAIH,EAAQ,GAAK,EAKxC,IAHAE,GAAKd,EAAIX,EAAGI,SAAWsB,EAAIF,EAAGpB,QAAUO,EAAIe,EAGvCxB,GAAK,IAAKA,EAAIuB,GACjB,GAAIzB,EAAGE,IAAMsB,EAAGtB,GAAI,OAAOF,EAAGE,GAAKsB,EAAGtB,GAAKqB,EAAQ,GAAK,EAI1D,OAAOZ,GAAKe,EAAI,EAAIf,EAAIe,EAAIH,EAAQ,GAAK,GAQ3C/B,EAAEmC,IAAM,SAAUL,GAChB,IAAI1B,EAAIwB,KACNtC,EAAMc,EAAEiB,YACRe,EAAIhC,EAAEK,EACN4B,GAAKP,EAAI,IAAIxC,EAAIwC,IAAIrB,EACrBU,EAAIf,EAAEgB,GAAKU,EAAEV,EAAI,GAAK,EACtBf,EAAKf,EAAIC,GAEX,GAAIc,MAASA,GAAMA,EAAK,GAAKA,EAAKZ,EAAQ,MAAMoB,MAAMf,GAGtD,IAAKuC,EAAE,GAAI,MAAMxB,MAlTHjB,6BAqTd,IAAKwC,EAAE,GAAI,OAAO,IAAI9C,EAAQ,EAAJ6B,GAE1B,IAAImB,EAAIC,EAAIrB,EAAGW,EAAKW,EAClBC,EAAKJ,EAAEX,QACPgB,EAAKJ,EAAKD,EAAEzB,OACZ+B,EAAKP,EAAExB,OACPgC,EAAIR,EAAEV,MAAM,EAAGY,GACfO,EAAKD,EAAEhC,OACPkC,EAAIhB,EACJiB,EAAKD,EAAErC,KACPuC,EAAK,EACLC,EAAI5C,GAAMyC,EAAEnC,EAAIP,EAAEO,EAAImB,EAAEnB,GAAK,EAS/B,IAPAmC,EAAE1B,EAAID,EACNA,EAAI8B,EAAI,EAAI,EAAIA,EAGhBR,EAAG3B,QAAQ,GAGJ+B,IAAOP,GAAKM,EAAErB,KAAK,GAE1B,EAAG,CAGD,IAAKL,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAGvB,GAAIoB,IAAOO,EAAKD,EAAEhC,QAChBiB,EAAMS,EAAKO,EAAK,GAAK,OAErB,IAAKL,GAAM,EAAGX,EAAM,IAAKW,EAAKF,GAC5B,GAAID,EAAEG,IAAOI,EAAEJ,GAAK,CAClBX,EAAMQ,EAAEG,GAAMI,EAAEJ,GAAM,GAAK,EAC3B,MAMN,KAAIX,EAAM,GAgBR,MAZA,IAAKU,EAAKM,GAAMP,EAAKD,EAAII,EAAII,GAAK,CAChC,GAAID,IAAIC,GAAMN,EAAGM,GAAK,CAEpB,IADAL,EAAKK,EACEL,IAAOI,IAAIJ,IAAMI,EAAEJ,GAAM,IAC9BI,EAAEJ,GACJI,EAAEC,IAAO,GAEXD,EAAEC,IAAON,EAAGM,GAGd,MAAQD,EAAE,IAAKA,EAAEM,QAOrBH,EAAGC,KAAQnB,EAAMX,IAAMA,EAGnB0B,EAAE,IAAMf,EAAKe,EAAEC,GAAMT,EAAEM,IAAO,EAC7BE,GAAKR,EAAEM,WAEJA,IAAOC,GAAMC,EAAE,KAAO3C,IAAckB,KAa9C,OAVK4B,EAAG,IAAY,GAANC,IAGZD,EAAGG,QACHJ,EAAEnC,KAIAqC,EAAKC,GAAG9C,EAAM2C,EAAGzC,EAAIf,EAAIE,GAAIoD,EAAE,KAAO3C,GAEnC6C,GAOT9C,EAAEmD,GAAK,SAAUrB,GACf,OAAQF,KAAKC,IAAIC,IAQnB9B,EAAEoD,GAAK,SAAUtB,GACf,OAAOF,KAAKC,IAAIC,GAAK,GAQvB9B,EAAEqD,IAAM,SAAUvB,GAChB,OAAOF,KAAKC,IAAIC,IAAM,GAOxB9B,EAAEsD,GAAK,SAAUxB,GACf,OAAOF,KAAKC,IAAIC,GAAK,GAQvB9B,EAAEuD,IAAM,SAAUzB,GAChB,OAAOF,KAAKC,IAAIC,GAAK,GAOvB9B,EAAEwD,MAAQxD,EAAEyD,IAAM,SAAU3B,GAC1B,IAAIpB,EAAGuB,EAAGyB,EAAGC,EACXvD,EAAIwB,KACJtC,EAAMc,EAAEiB,YACRe,EAAIhC,EAAEgB,EACNiB,GAAKP,EAAI,IAAIxC,EAAIwC,IAAIV,EAGvB,GAAIgB,GAAKC,EAEP,OADAP,EAAEV,GAAKiB,EACAjC,EAAEwD,KAAK9B,GAGhB,IAAItB,EAAKJ,EAAEK,EAAEiB,QACXmC,EAAKzD,EAAEO,EACPqB,EAAKF,EAAErB,EACPqD,EAAKhC,EAAEnB,EAGT,IAAKH,EAAG,KAAOwB,EAAG,GAGhB,OAAOA,EAAG,IAAMF,EAAEV,GAAKiB,EAAGP,GAAK,IAAIxC,EAAIkB,EAAG,GAAKJ,EAAI,GAIrD,GAAIgC,EAAIyB,EAAKC,EAAI,CAWf,KATIH,EAAOvB,EAAI,IACbA,GAAKA,EACLsB,EAAIlD,IAEJsD,EAAKD,EACLH,EAAI1B,GAGN0B,EAAEK,UACG1B,EAAID,EAAGC,KAAMqB,EAAEnC,KAAK,GACzBmC,EAAEK,eAMF,IAFA9B,IAAM0B,EAAOnD,EAAGI,OAASoB,EAAGpB,QAAUJ,EAAKwB,GAAIpB,OAE1CwB,EAAIC,EAAI,EAAGA,EAAIJ,EAAGI,IACrB,GAAI7B,EAAG6B,IAAML,EAAGK,GAAI,CAClBsB,EAAOnD,EAAG6B,GAAKL,EAAGK,GAClB,MAiBN,GAXIsB,IACFD,EAAIlD,EACJA,EAAKwB,EACLA,EAAK0B,EACL5B,EAAEV,GAAKU,EAAEV,IAONiB,GAAKJ,EAAID,EAAGpB,SAAWF,EAAIF,EAAGI,SAAW,EAAG,KAAOyB,KAAM7B,EAAGE,KAAO,EAGxE,IAAK2B,EAAI3B,EAAGuB,EAAIG,GAAI,CAClB,GAAI5B,IAAKyB,GAAKD,EAAGC,GAAI,CACnB,IAAKvB,EAAIuB,EAAGvB,IAAMF,IAAKE,IAAKF,EAAGE,GAAK,IAClCF,EAAGE,GACLF,EAAGyB,IAAM,GAGXzB,EAAGyB,IAAMD,EAAGC,GAId,KAAmB,IAAZzB,IAAK6B,IAAW7B,EAAGO,MAG1B,KAAiB,IAAVP,EAAG,IACRA,EAAG0C,UACDY,EAeJ,OAZKtD,EAAG,KAGNsB,EAAEV,EAAI,EAGNZ,GAAMsD,EAAK,IAGbhC,EAAErB,EAAID,EACNsB,EAAEnB,EAAImD,EAEChC,GAOT9B,EAAEgE,IAAM,SAAUlC,GAChB,IAAImC,EACF7D,EAAIwB,KACJtC,EAAMc,EAAEiB,YACRe,EAAIhC,EAAEgB,EACNiB,GAAKP,EAAI,IAAIxC,EAAIwC,IAAIV,EAEvB,IAAKU,EAAErB,EAAE,GAAI,MAAMI,MAviBLjB,6BA8iBd,OALAQ,EAAEgB,EAAIU,EAAEV,EAAI,EACZ6C,EAAmB,GAAZnC,EAAED,IAAIzB,GACbA,EAAEgB,EAAIgB,EACNN,EAAEV,EAAIiB,EAEF4B,EAAa,IAAI3E,EAAIc,IAEzBgC,EAAI9C,EAAIC,GACR8C,EAAI/C,EAAIE,GACRF,EAAIC,GAAKD,EAAIE,GAAK,EAClBY,EAAIA,EAAE+B,IAAIL,GACVxC,EAAIC,GAAK6C,EACT9C,EAAIE,GAAK6C,EAEFT,KAAK4B,MAAMpD,EAAE8D,MAAMpC,MAO5B9B,EAAE4D,KAAO5D,EAAEmE,IAAM,SAAUrC,GACzB,IAAI4B,EACFtD,EAAIwB,KACJtC,EAAMc,EAAEiB,YACRe,EAAIhC,EAAEgB,EACNiB,GAAKP,EAAI,IAAIxC,EAAIwC,IAAIV,EAGvB,GAAIgB,GAAKC,EAEP,OADAP,EAAEV,GAAKiB,EACAjC,EAAEoD,MAAM1B,GAGjB,IAAI+B,EAAKzD,EAAEO,EACTH,EAAKJ,EAAEK,EACPqD,EAAKhC,EAAEnB,EACPqB,EAAKF,EAAErB,EAGT,IAAKD,EAAG,KAAOwB,EAAG,GAAI,OAAOA,EAAG,GAAKF,EAAI,IAAIxC,EAAIkB,EAAG,GAAKJ,EAAQ,EAAJgC,GAM7D,GAJA5B,EAAKA,EAAGkB,QAIJU,EAAIyB,EAAKC,EAAI,CAUf,IATI1B,EAAI,GACN0B,EAAKD,EACLH,EAAI1B,IAEJI,GAAKA,EACLsB,EAAIlD,GAGNkD,EAAEK,UACK3B,KAAMsB,EAAEnC,KAAK,GACpBmC,EAAEK,UAaJ,IATIvD,EAAGI,OAASoB,EAAGpB,OAAS,IAC1B8C,EAAI1B,EACJA,EAAKxB,EACLA,EAAKkD,GAGPtB,EAAIJ,EAAGpB,OAGFyB,EAAI,EAAGD,EAAG5B,EAAG4B,IAAM,GAAIC,GAAK7B,IAAK4B,GAAK5B,EAAG4B,GAAKJ,EAAGI,GAAKC,GAAK,GAAK,EAUrE,IANIA,IACF7B,EAAGM,QAAQuB,KACTyB,GAIC1B,EAAI5B,EAAGI,OAAoB,IAAZJ,IAAK4B,IAAW5B,EAAGO,MAKvC,OAHAe,EAAErB,EAAID,EACNsB,EAAEnB,EAAImD,EAEChC,GAWT9B,EAAEoE,IAAM,SAAUlD,GAChB,IAAId,EAAIwB,KACNyC,EAAM,IAAIjE,EAAEiB,YAAY,GACxBS,EAAIuC,EACJtC,EAAQb,EAAI,EAEd,GAAIA,MAAQA,GAAKA,GAzqBL,KAyqBuBA,EAzqBvB,IAyqBsC,MAAML,MAAMhB,EAAU,YAGxE,IAFIkC,IAAOb,GAAKA,GAGN,EAAJA,IAAOY,EAAIA,EAAEoC,MAAM9D,IACvBc,IAAM,GAENd,EAAIA,EAAE8D,MAAM9D,GAGd,OAAO2B,EAAQsC,EAAIlC,IAAIL,GAAKA,GAa9B9B,EAAEG,MAAQ,SAAUE,EAAIC,GACtB,IAAIhB,EAAMsC,KAAKP,YACf,GAAIhB,IAAOJ,EAAWI,EAAK,OACtB,GAAIA,MAASA,GAAMA,EAAK,GAAKA,EAAKZ,EAAQ,MAAMoB,MAAMf,GAC3D,OAAOK,EAAM,IAAIb,EAAIsC,MAAOvB,EAAIC,IAAOL,EAAYX,EAAIE,GAAKc,IAQ9DN,EAAEsE,KAAO,WACP,IAAI1B,EAAGnC,EAAGiD,EACRtD,EAAIwB,KACJtC,EAAMc,EAAEiB,YACRD,EAAIhB,EAAEgB,EACNT,EAAIP,EAAEO,EACN4D,EAAO,IAAIjF,EAAI,IAGjB,IAAKc,EAAEK,EAAE,GAAI,OAAO,IAAInB,EAAIc,GAG5B,GAAIgB,EAAI,EAAG,MAAMP,MAAMjB,EAAO,kBAOpB,KAJVwB,EAAIoD,KAAKF,KAAKlE,EAAEqE,cAIDrD,IAAM,EAAA,IACnBX,EAAIL,EAAEK,EAAEe,KAAK,KACLZ,OAASD,EAAI,IAAIF,GAAK,MAC9BmC,EAAI,IAAItD,EAAIkF,KAAKF,KAAK7D,GAAGgE,aACvB9D,IAAMA,EAAI,GAAK,EAAI,IAAMA,EAAI,GAAS,EAAJA,IAEpCiC,EAAI,IAAItD,EAAI8B,EAAEqD,YAGhB9D,EAAIiC,EAAEjC,GAAKrB,EAAIC,IAAM,GAGrB,GACEmE,EAAId,EACJA,EAAI2B,EAAKL,MAAMR,EAAEE,KAAKxD,EAAE+B,IAAIuB,WACrBA,EAAEjD,EAAEiB,MAAM,EAAGf,GAAGa,KAAK,MAAQoB,EAAEnC,EAAEiB,MAAM,EAAGf,GAAGa,KAAK,KAE3D,OAAOrB,EAAMyC,EAAGtD,EAAIC,IAAM,EAAGD,EAAIE,KAOnCQ,EAAEkE,MAAQlE,EAAE0E,IAAM,SAAU5C,GAC1B,IAAIrB,EACFL,EAAIwB,KACJtC,EAAMc,EAAEiB,YACRb,EAAKJ,EAAEK,EACPuB,GAAMF,EAAI,IAAIxC,EAAIwC,IAAIrB,EACtB2B,EAAI5B,EAAGI,OACPyB,EAAIL,EAAGpB,OACPF,EAAIN,EAAEO,EACNsB,EAAIH,EAAEnB,EAMR,GAHAmB,EAAEV,EAAIhB,EAAEgB,GAAKU,EAAEV,EAAI,GAAK,GAGnBZ,EAAG,KAAOwB,EAAG,GAAI,OAAO,IAAI1C,EAAU,EAANwC,EAAEV,GAgBvC,IAbAU,EAAEnB,EAAID,EAAIuB,EAGNG,EAAIC,IACN5B,EAAID,EACJA,EAAKwB,EACLA,EAAKvB,EACLwB,EAAIG,EACJA,EAAIC,EACJA,EAAIJ,GAIDxB,EAAI,IAAIkE,MAAM1C,EAAIG,EAAIC,GAAIJ,KAAMxB,EAAEwB,GAAK,EAK5C,IAAKvB,EAAI2B,EAAG3B,KAAM,CAIhB,IAHA2B,EAAI,EAGCJ,EAAIG,EAAI1B,EAAGuB,EAAIvB,GAGlB2B,EAAI5B,EAAEwB,GAAKD,EAAGtB,GAAKF,EAAGyB,EAAIvB,EAAI,GAAK2B,EACnC5B,EAAEwB,KAAOI,EAAI,GAGbA,EAAIA,EAAI,GAAK,EAGf5B,EAAEwB,IAAMxB,EAAEwB,GAAKI,GAAK,GAQtB,IAJIA,IAAKP,EAAEnB,EACNF,EAAEyC,QAGFxC,EAAID,EAAEG,QAASH,IAAIC,IAAKD,EAAEM,MAG/B,OAFAe,EAAErB,EAAIA,EAECqB,GAUT9B,EAAE4E,cAAgB,SAAUvE,GAC1B,OAAOW,EAAUY,KAAM,EAAGvB,EAAIA,IAahCL,EAAE6E,QAAU,SAAUxE,GACpB,OAAOW,EAAUY,KAAM,EAAGvB,EAAIuB,KAAKjB,EAAIN,IAWzCL,EAAE8E,YAAc,SAAUC,GACxB,OAAO/D,EAAUY,KAAM,EAAGmD,EAAIA,EAAK,IAUrC/E,EAAEyE,SAAW,WACX,OAAOzD,EAAUY,OAUnB5B,EAAEgF,QAAUhF,EAAEiF,OAAS,WACrB,OAAOjE,EAAUY,KAAM,KAOzBtC,EAh1BA,SAAS4F,IAQP,SAAS5F,EAAI4B,GACX,IAAId,EAAIwB,KAGR,KAAMxB,aAAad,GAAM,OAAO4B,IAAMjB,EAAYiF,IAAU,IAAI5F,EAAI4B,GAGhEA,aAAa5B,GACfc,EAAEgB,EAAIF,EAAEE,EACRhB,EAAEO,EAAIO,EAAEP,EACRP,EAAEK,EAAIS,EAAET,EAAEiB,SA6BhB,SAAetB,EAAGc,GAChB,IAAIP,EAAGD,EAAGyE,EAGV,GAAU,IAANjE,GAAW,EAAIA,EAAI,EAAGA,EAAI,UACzB,IAAKhB,EAAQkF,KAAKlE,GAAK,IAAK,MAAML,MAAMhB,EAAU,UAwBvD,IArBAO,EAAEgB,EAAmB,KAAfF,EAAEO,OAAO,IAAaP,EAAIA,EAAEQ,MAAM,IAAK,GAAK,GAG7Cf,EAAIO,EAAEmE,QAAQ,OAAS,IAAGnE,EAAIA,EAAEoE,QAAQ,IAAK,MAG7C5E,EAAIQ,EAAEqE,OAAO,OAAS,GAGrB5E,EAAI,IAAGA,EAAID,GACfC,IAAMO,EAAEQ,MAAMhB,EAAI,GAClBQ,EAAIA,EAAEsE,UAAU,EAAG9E,IACVC,EAAI,IAGbA,EAAIO,EAAEN,QAGRuE,EAAKjE,EAAEN,OAGFF,EAAI,EAAGA,EAAIyE,GAAqB,KAAfjE,EAAEO,OAAOf,MAAcA,EAE7C,GAAIA,GAAKyE,EAGP/E,EAAEK,GAAKL,EAAEO,EAAI,OACR,CAGL,KAAOwE,EAAK,GAAuB,KAAlBjE,EAAEO,SAAS0D,KAK5B,IAJA/E,EAAEO,EAAIA,EAAID,EAAI,EACdN,EAAEK,KAGGE,EAAI,EAAGD,GAAKyE,GAAK/E,EAAEK,EAAEE,MAAQO,EAAEO,OAAOf,MAtEzC+E,CAAMrF,EAAGc,GAOXd,EAAEiB,YAAc/B,EAUlB,OAPAA,EAAIoG,UAAY1F,EAChBV,EAAIC,GAAKA,EACTD,EAAIE,GAAKA,EACTF,EAAII,GAAKA,EACTJ,EAAIK,GAAKA,EACTL,EAAIqG,QAAU,QAEPrG,EA2yBH4F,IAEO,QAAI5F,EAAIA,IAAMA,EAOiBsG,EAAOC,QACjDD,UAAiBtG,EAIjBD,EAAOC,IAAMA,EAx6BjB,CA06BGsC,yCCp6BCkE,GAGJA,gBAOAA,2BAEa,WACA,eACC,aACC,cACC,WACD,qBAGC,WACD,WACA,YACD,OAQVC,EAAYpB,MAAMe,UAAUM,IAC9BC,EAAgBtB,MAAMuB,QACtBzB,EAAW0B,OAAOT,UAAUjB,SAM9B,SAAS2B,EAASC,YACE,KAARA,GAAeA,GAAOA,EAAIC,YAAcD,EAAIE,QAOxD,SAASL,EAAQG,UACRJ,EAAgBA,EAAcI,GAA8B,mBAAvB5B,EAAS+B,KAAKH,GAM5D,SAASI,EAASJ,UACTA,GAA8B,oBAAvB5B,EAAS+B,KAAKH,GAQ9B,SAASK,EAASC,EAAQC,OACpBC,MAICA,OAHIF,QACFC,MAGDA,EAAKE,eAAeD,IAEH,MAAfF,EAAOE,KAAcF,EAAOE,GAAOD,EAAKC,WAGzCF,EAST,SAASX,EAAIK,EAAKU,EAAUC,OACRtG,EAAGuB,EAAjBgF,SAECZ,EAAK,OAAOY,KAGblB,GAAaM,EAAIL,MAAQD,EAAW,OAAOM,EAAIL,IAAIe,EAAUC,OAG5DtG,EAAI,EAAGuB,EAAIoE,EAAIzF,OAAQF,EAAIuB,EAAGvB,MACzBA,GAAKqG,EAASP,KAAKQ,EAASX,EAAI3F,GAAIA,EAAG2F,UAE1CY,EAMT,SAASC,EAAeC,EAAKC,YACrB5C,KAAKrE,MAAMqE,KAAK7C,IAAIwF,IACnBE,MAAMF,GAAMC,EAAOD,EAa5B,SAASG,EAAoBC,OACvBb,EAAWZ,EAAI0B,SAASC,SAASF,aAGd,mBAAXA,IAAwBA,EAASA,KAGxCnB,EAAUmB,IAAYA,EAAOG,MAAM,WAI9BH,MACAA,EAAOjC,QAAQ,IAAK,IAAIA,QAAQ,KAAM,YACrCiC,GAIEA,GAAWA,EAAOI,KAAQJ,EAAOI,IAAID,MAAM,MAWjDH,EARKnB,EAAUM,GAA0BZ,EAAI0B,SAASC,SAASF,YAC5Db,MACAA,EAASpB,QAAQ,KAAM,YACtBoB,GAH0BA,EA4BvC,SAASkB,EAAYC,EAAOC,MAEtB5B,EAAQ2B,UACH7B,EAAI6B,EAAO,SAASV,UAClBS,EAAYT,EAAKW,OAKpBD,GAAS,aAIR,IAAIvI,EAAIuI,GACf,MAAME,MAGED,GAAWhC,EAAI0B,SAASQ,OAAOF,YAGrCG,EAAQ,IAAIC,OAAO,SAAWJ,EAAU,KAAM,MAC9CK,MAAiBN,GAClBvC,QAAQ,kBAAmB,OAC3BA,QAAQ2C,EAAO,IACf3C,QAAQwC,EAAS,gBAGX,IAAIxI,EAAI6I,GACf,MAAOJ,UACA,IAAIzI,EAAI,IAOnB,SAAS8I,EAASP,EAAOC,UAEnB5B,EAAQ2B,GACH7B,EAAI6B,EAAO,SAASV,UAClBkB,OAAOT,EAAYT,EAAKW,MAI5BO,OAAOT,EAAYC,EAAOC,IA4BnC,SAASQ,EAAaN,EAAQO,EAAWC,EAAUV,MAE7C5B,EAAQ8B,UACHhC,EAAIgC,EAAQ,SAASb,UACnBmB,EAAanB,EAAKoB,EAAWC,EAAUV,OAKzCF,EAAYI,OAGjBS,EAAO/B,EACRD,EAAS8B,GAAaA,aACTA,WACDC,UACDV,GAEZhC,EAAI0B,SAASQ,QAIXU,EAAexB,EAAeuB,EAAKF,WAGnCI,EAAWX,EAAO1E,GAAG,GAAK,IAAM,GAChCsF,EAAcZ,EAAOrG,MAAMkD,QAAQ6D,GAAcG,MAAM,KAGvDC,EAASH,YAFFC,EAAY,GAKAtD,QAAQ,wBAAyBmD,EAAKD,UAEzDE,OACQD,EAAKX,QAAUc,EAAY,IAGhCE,SA7EThD,EAAI8B,YAAcA,EAClB9B,EAAIiD,SAAWnB,EAaf9B,EAAIsC,SAAWA,EACftC,EAAIL,MAAQ2C,EAeZtC,EAAIjB,QANJ,SAAiBgD,EAAOU,YACVrB,EAAeqB,EAAWzC,EAAI0B,SAASQ,OAAOO,WAEnDX,EAAYC,GAAOhD,QAAQ0D,IAqDpCzC,EAAIwC,aAAeA,EACnBxC,EAAIyB,OAASe,EA+CbxC,EAAIkD,YAjCJ,SAASA,EAAYhB,EAAQiB,EAAQV,EAAWC,EAAUV,EAASP,MAE7DrB,EAAQ8B,UACHhC,EAAIgC,EAAQ,SAASb,UACnB6B,EAAY7B,EAAK8B,EAAQV,EAAWC,EAAUV,EAASP,OAKzDK,EAAYI,OAGjBS,EAAO/B,EACRD,EAASwC,GAAUA,UACTA,YACGV,WACDC,UACDV,SACDP,GAEXzB,EAAI0B,SAASC,UAIXyB,EAAU5B,EAAoBmB,EAAKlB,eAGvBS,EAAO5E,GAAG,GAAK8F,EAAQvB,IAAMK,EAAO1E,GAAG,GAAK4F,EAAQC,IAAMD,EAAQE,MAGjE9D,QAAQ,KAAMmD,EAAKQ,QAAQ3D,QAAQ,KAAMgD,EAAaN,EAAOrG,MAAOuF,EAAeuB,EAAKF,WAAYE,EAAKD,SAAUC,EAAKX,WAyE3IhC,EAAIuD,aAvDJ,SAAsBC,EAAML,EAAQV,EAAWC,EAAUV,EAASP,OAC3D+B,IAASpD,EAAQoD,GAAO,aAGzBb,EAAO/B,EACND,EAASwC,GAAUA,UACTA,YACGV,WACDC,UACDV,SACDP,GAEXzB,EAAI0B,SAASC,YAILH,EAAoBmB,EAAKlB,UAGlB2B,EAAQvB,IAAItC,QAAQ,MAAQ6D,EAAQvB,IAAItC,QAAQ,QAGrD,SAuBPW,EApBOA,EAAIsD,EAAM,SAASnC,MACzBjB,EAAQiB,UAEHrB,EAAIuD,aAAalC,EAAKsB,OASzBc,MANE3B,EAAYT,IAGE/D,GAAG,GAAK8F,EAAQvB,IAAMR,EAAI7D,GAAG,GAAK4F,EAAQC,IAAMD,EAAQE,MAGvD9D,QAAQ,KAAMmD,EAAKQ,QAAQ3D,QAAQ,KAAMgD,EAAanB,EAAIxF,MAAOuF,EAAeuB,EAAKF,WAAYE,EAAKD,SAAUC,EAAKX,iBAEtIyB,EAAK3I,OAAS4I,IAAWA,EAAYD,EAAK3I,QACvC2I,IAKS,SAASpC,UAEzBf,EAASe,IAAQA,EAAIvG,OAAS4I,EAEzBC,EAAiBtC,EAAI7B,QAAQmD,EAAKQ,OAAQR,EAAKQ,OAAQ,IAAItE,MAAM6E,EAAYrC,EAAIvG,OAAS,GAAGY,KAAK,MAAU,IAAImD,MAAM6E,EAAYrC,EAAIvG,OAAS,GAAGY,KAAK,KAAQ2F,EAEjKA"}