{"version":3,"file":"accounting.js","sources":["../node_modules/big.js/big.js","../lib/index.js"],"sourcesContent":["/*\r\n *  big.js v5.0.3\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  https://github.com/MikeMcl/big.js/LICENCE\r\n */\r\n;(function (GLOBAL) {\r\n  'use strict';\r\n  var Big,\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n    // The default values below must be integers within the stated ranges.\r\n\r\n    /*\r\n     * The maximum number of decimal places (DP) of the results of operations involving division:\r\n     * div and sqrt, and pow with negative exponents.\r\n     */\r\n    DP = 20,          // 0 to MAX_DP\r\n\r\n    /*\r\n     * The rounding mode (RM) used when rounding to the above decimal places.\r\n     *\r\n     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n     *  3  Away from zero.                                  (ROUND_UP)\r\n     */\r\n    RM = 1,             // 0, 1, 2 or 3\r\n\r\n    // The maximum value of DP and Big.DP.\r\n    MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n    // The maximum magnitude of the exponent argument to the pow method.\r\n    MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n    /*\r\n     * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n     * (JavaScript numbers: -7)\r\n     * -1000000 is the minimum recommended exponent value of a Big.\r\n     */\r\n    NE = -7,            // 0 to -1000000\r\n\r\n    /*\r\n     * The positive exponent (PE) at and above which toString returns exponential notation.\r\n     * (JavaScript numbers: 21)\r\n     * 1000000 is the maximum recommended exponent value of a Big.\r\n     * (This limit is not enforced or checked.)\r\n     */\r\n    PE = 21,            // 0 to 1000000\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n    // Error messages.\r\n    NAME = '[big.js] ',\r\n    INVALID = NAME + 'Invalid ',\r\n    INVALID_DP = INVALID + 'decimal places',\r\n    INVALID_RM = INVALID + 'rounding mode',\r\n    DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n    // The shared prototype object.\r\n    P = {},\r\n    UNDEFINED = void 0,\r\n    NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n  /*\r\n   * Create and return a Big constructor.\r\n   *\r\n   */\r\n  function _Big_() {\r\n\r\n    /*\r\n     * The Big constructor and exported function.\r\n     * Create and return a new instance of a Big number object.\r\n     *\r\n     * n {number|string|Big} A numeric value.\r\n     */\r\n    function Big(n) {\r\n      var x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n      // Duplicate.\r\n      if (n instanceof Big) {\r\n        x.s = n.s;\r\n        x.e = n.e;\r\n        x.c = n.c.slice();\r\n      } else {\r\n        parse(x, n);\r\n      }\r\n\r\n      /*\r\n       * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\r\n       * points to Object.\r\n       */\r\n      x.constructor = Big;\r\n    }\r\n\r\n    Big.prototype = P;\r\n    Big.DP = DP;\r\n    Big.RM = RM;\r\n    Big.NE = NE;\r\n    Big.PE = PE;\r\n    Big.version = '5.0.2';\r\n\r\n    return Big;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the number or string value passed to a Big constructor.\r\n   *\r\n   * x {Big} A Big number instance.\r\n   * n {number|string} A numeric value.\r\n   */\r\n  function parse(x, n) {\r\n    var e, i, nl;\r\n\r\n    // Minus zero?\r\n    if (n === 0 && 1 / n < 0) n = '-0';\r\n    else if (!NUMERIC.test(n += '')) throw Error(INVALID + 'number');\r\n\r\n    // Determine sign.\r\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n    // Decimal point?\r\n    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = n.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +n.slice(i + 1);\r\n      n = n.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = n.length;\r\n    }\r\n\r\n    nl = n.length;\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n    if (i == nl) {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    } else {\r\n\r\n      // Determine trailing zeros.\r\n      for (; nl > 0 && n.charAt(--nl) == '0';);\r\n      x.e = e - i - 1;\r\n      x.c = [];\r\n\r\n      // Convert string to array of digits without leading/trailing zeros.\r\n      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Round Big x to a maximum of dp decimal places using rounding mode rm.\r\n   * Called by stringify, P.div, P.round and P.sqrt.\r\n   *\r\n   * x {Big} The Big to round.\r\n   * dp {number} Integer, 0 to MAX_DP inclusive.\r\n   * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\r\n   * [more] {boolean} Whether the result of division was truncated.\r\n   */\r\n  function round(x, dp, rm, more) {\r\n    var xc = x.c,\r\n      i = x.e + dp + 1;\r\n\r\n    if (i < xc.length) {\r\n      if (rm === 1) {\r\n\r\n        // xc[i] is the digit after the digit that may be rounded up.\r\n        more = xc[i] >= 5;\r\n      } else if (rm === 2) {\r\n        more = xc[i] > 5 || xc[i] == 5 &&\r\n          (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\r\n      } else if (rm === 3) {\r\n        more = more || xc[i] !== UNDEFINED || i < 0;\r\n      } else {\r\n        more = false;\r\n        if (rm !== 0) throw Error(INVALID_RM);\r\n      }\r\n\r\n      if (i < 1) {\r\n        xc.length = 1;\r\n\r\n        if (more) {\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          x.e = -dp;\r\n          xc[0] = 1;\r\n        } else {\r\n\r\n          // Zero.\r\n          xc[0] = x.e = 0;\r\n        }\r\n      } else {\r\n\r\n        // Remove any digits after the required decimal places.\r\n        xc.length = i--;\r\n\r\n        // Round up?\r\n        if (more) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up.\r\n          for (; ++xc[i] > 9;) {\r\n            xc[i] = 0;\r\n            if (!i--) {\r\n              ++x.e;\r\n              xc.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; !xc[--i];) xc.pop();\r\n      }\r\n    } else if (rm < 0 || rm > 3 || rm !== ~~rm) {\r\n      throw Error(INVALID_RM);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of Big x in normal or exponential notation.\r\n   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n   *\r\n   * x {Big}\r\n   * id? {number} Caller id.\r\n   *         1 toExponential\r\n   *         2 toFixed\r\n   *         3 toPrecision\r\n   *         4 valueOf\r\n   * n? {number|undefined} Caller's argument.\r\n   * k? {number|undefined}\r\n   */\r\n  function stringify(x, id, n, k) {\r\n    var e, s,\r\n      Big = x.constructor,\r\n      z = !x.c[0];\r\n\r\n    if (n !== UNDEFINED) {\r\n      if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\r\n        throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\r\n      }\r\n\r\n      x = new Big(x);\r\n\r\n      // The index of the digit that may be rounded up.\r\n      n = k - x.e;\r\n\r\n      // Round?\r\n      if (x.c.length > ++k) round(x, n, Big.RM);\r\n\r\n      // toFixed: recalculate k as x.e may have changed if value rounded up.\r\n      if (id == 2) k = x.e + n + 1;\r\n\r\n      // Append zeros?\r\n      for (; x.c.length < k;) x.c.push(0);\r\n    }\r\n\r\n    e = x.e;\r\n    s = x.c.join('');\r\n    n = s.length;\r\n\r\n    // Exponential notation?\r\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\r\n      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n    // Normal notation.\r\n    } else if (e < 0) {\r\n      for (; ++e;) s = '0' + s;\r\n      s = '0.' + s;\r\n    } else if (e > 0) {\r\n      if (++e > n) for (e -= n; e--;) s += '0';\r\n      else if (e < n) s = s.slice(0, e) + '.' + s.slice(e);\r\n    } else if (n > 1) {\r\n      s = s.charAt(0) + '.' + s.slice(1);\r\n    }\r\n\r\n    return x.s < 0 && (!z || id == 4) ? '-' + s : s;\r\n  }\r\n\r\n\r\n  // Prototype/instance methods\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the absolute value of this Big.\r\n   */\r\n  P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return 1 if the value of this Big is greater than the value of Big y,\r\n   *       -1 if the value of this Big is less than the value of Big y, or\r\n   *        0 if they have the same value.\r\n  */\r\n  P.cmp = function (y) {\r\n    var isneg,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new x.constructor(y)).c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    isneg = i < 0;\r\n\r\n    // Compare exponents.\r\n    if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = -1; ++i < j;) {\r\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.div = function (y) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      a = x.c,                  // dividend\r\n      b = (y = new Big(y)).c,   // divisor\r\n      k = x.s == y.s ? 1 : -1,\r\n      dp = Big.DP;\r\n\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);\r\n\r\n    // Divisor is zero?\r\n    if (!b[0]) throw Error(DIV_BY_ZERO);\r\n\r\n    // Dividend is 0? Return +-0.\r\n    if (!a[0]) return new Big(k * 0);\r\n\r\n    var bl, bt, n, cmp, ri,\r\n      bz = b.slice(),\r\n      ai = bl = b.length,\r\n      al = a.length,\r\n      r = a.slice(0, bl),   // remainder\r\n      rl = r.length,\r\n      q = y,                // quotient\r\n      qc = q.c = [],\r\n      qi = 0,\r\n      d = dp + (q.e = x.e - y.e) + 1;    // number of digits of the result\r\n\r\n    q.s = k;\r\n    k = d < 0 ? 0 : d;\r\n\r\n    // Create version of divisor with leading zero.\r\n    bz.unshift(0);\r\n\r\n    // Add zeros to make remainder as long as divisor.\r\n    for (; rl++ < bl;) r.push(0);\r\n\r\n    do {\r\n\r\n      // n is how many times the divisor goes into current remainder.\r\n      for (n = 0; n < 10; n++) {\r\n\r\n        // Compare divisor and remainder.\r\n        if (bl != (rl = r.length)) {\r\n          cmp = bl > rl ? 1 : -1;\r\n        } else {\r\n          for (ri = -1, cmp = 0; ++ri < bl;) {\r\n            if (b[ri] != r[ri]) {\r\n              cmp = b[ri] > r[ri] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        // If divisor < remainder, subtract divisor from remainder.\r\n        if (cmp < 0) {\r\n\r\n          // Remainder can't be more than 1 digit longer than divisor.\r\n          // Equalise lengths using divisor with extra leading zero?\r\n          for (bt = rl == bl ? b : bz; rl;) {\r\n            if (r[--rl] < bt[rl]) {\r\n              ri = rl;\r\n              for (; ri && !r[--ri];) r[ri] = 9;\r\n              --r[ri];\r\n              r[rl] += 10;\r\n            }\r\n            r[rl] -= bt[rl];\r\n          }\r\n\r\n          for (; !r[0];) r.shift();\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Add the digit n to the result array.\r\n      qc[qi++] = cmp ? n : ++n;\r\n\r\n      // Update the remainder.\r\n      if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n      else r = [a[ai]];\r\n\r\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n    if (!qc[0] && qi != 1) {\r\n\r\n      // There can't be more than one zero.\r\n      qc.shift();\r\n      q.e--;\r\n    }\r\n\r\n    // Round?\r\n    if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);\r\n\r\n    return q;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n   */\r\n  P.eq = function (y) {\r\n    return !this.cmp(y);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n   * false.\r\n   */\r\n  P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.gte = function (y) {\r\n    return this.cmp(y) > -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n   */\r\n  P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var i, j, t, xlty,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xc = x.c.slice(),\r\n      xe = x.e,\r\n      yc = y.c,\r\n      ye = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n\r\n      // y is non-zero? x is non-zero? Or both are zero.\r\n      return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\r\n    }\r\n\r\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n    if (a = xe - ye) {\r\n\r\n      if (xlty = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (b = a; b--;) t.push(0);\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n        if (xc[b] != yc[b]) {\r\n          xlty = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xlty) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    /*\r\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n     * needs to start at yc.length.\r\n     */\r\n    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n    // Subtract yc from xc.\r\n    for (b = i; j > a;) {\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i];) xc[i] = 9;\r\n        --xc[i];\r\n        xc[j] += 10;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xc[--b] === 0;) xc.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] === 0;) {\r\n      xc.shift();\r\n      --ye;\r\n    }\r\n\r\n    if (!xc[0]) {\r\n\r\n      // n - n = +0\r\n      y.s = 1;\r\n\r\n      // Result must be zero.\r\n      xc = [ye = 0];\r\n    }\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n   */\r\n  P.mod = function (y) {\r\n    var ygtx,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    if (!y.c[0]) throw Error(DIV_BY_ZERO);\r\n\r\n    x.s = y.s = 1;\r\n    ygtx = y.cmp(x) == 1;\r\n    x.s = a;\r\n    y.s = b;\r\n\r\n    if (ygtx) return new Big(x);\r\n\r\n    a = Big.DP;\r\n    b = Big.RM;\r\n    Big.DP = Big.RM = 0;\r\n    x = x.div(y);\r\n    Big.DP = a;\r\n    Big.RM = b;\r\n\r\n    return this.minus(x.times(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e,\r\n      xc = x.c,\r\n      ye = y.e,\r\n      yc = y.c;\r\n\r\n    // Either zero? y is non-zero? x is non-zero? Or both are zero.\r\n    if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);\r\n\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    // Note: Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--;) t.push(0);\r\n      t.reverse();\r\n    }\r\n\r\n    // Point xc to the longer array.\r\n    if (xc.length - yc.length < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n    }\r\n\r\n    a = yc.length;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n    for (b = 0; a; xc[a] %= 10) b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n    if (b) {\r\n      xc.unshift(b);\r\n      ++ye;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (a = xc.length; xc[--a] === 0;) xc.pop();\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a Big whose value is the value of this Big raised to the power n.\r\n   * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n   * mode Big.RM.\r\n   *\r\n   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n   */\r\n  P.pow = function (n) {\r\n    var x = this,\r\n      one = new x.constructor(1),\r\n      y = one,\r\n      isneg = n < 0;\r\n\r\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + 'exponent');\r\n    if (isneg) n = -n;\r\n\r\n    for (;;) {\r\n      if (n & 1) y = y.times(x);\r\n      n >>= 1;\r\n      if (!n) break;\r\n      x = x.times(x);\r\n    }\r\n\r\n    return isneg ? one.div(y) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal\r\n   * places using rounding mode rm.\r\n   * If dp is not specified, round to 0 decimal places.\r\n   * If rm is not specified, use Big.RM.\r\n   *\r\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n   * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\r\n   */\r\n  P.round = function (dp, rm) {\r\n    var Big = this.constructor;\r\n    if (dp === UNDEFINED) dp = 0;\r\n    else if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);\r\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.sqrt = function () {\r\n    var r, c, t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      s = x.s,\r\n      e = x.e,\r\n      half = new Big(0.5);\r\n\r\n    // Zero?\r\n    if (!x.c[0]) return new Big(x);\r\n\r\n    // Negative?\r\n    if (s < 0) throw Error(NAME + 'No square root');\r\n\r\n    // Estimate.\r\n    s = Math.sqrt(x.toString());\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Re-estimate: pass x to Math.sqrt as integer, then adjust the result exponent.\r\n    if (s === 0 || s === 1 / 0) {\r\n      c = x.c.join('');\r\n      if (!(c.length + e & 1)) c += '0';\r\n      r = new Big(Math.sqrt(c).toString());\r\n      r.e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n    } else {\r\n      r = new Big(s.toString());\r\n    }\r\n\r\n    e = r.e + (Big.DP += 4);\r\n\r\n    // Newton-Raphson iteration.\r\n    do {\r\n      t = r;\r\n      r = half.times(t.plus(x.div(t)));\r\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n    return round(r, Big.DP -= 4, Big.RM);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big times the value of Big y.\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var c,\r\n      x = this,\r\n      Big = x.constructor,\r\n      xc = x.c,\r\n      yc = (y = new Big(y)).c,\r\n      a = xc.length,\r\n      b = yc.length,\r\n      i = x.e,\r\n      j = y.e;\r\n\r\n    // Determine sign of result.\r\n    y.s = x.s == y.s ? 1 : -1;\r\n\r\n    // Return signed 0 if either 0.\r\n    if (!xc[0] || !yc[0]) return new Big(y.s * 0);\r\n\r\n    // Initialise exponent of result as x.e + y.e.\r\n    y.e = i + j;\r\n\r\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n    if (a < b) {\r\n      c = xc;\r\n      xc = yc;\r\n      yc = c;\r\n      j = a;\r\n      a = b;\r\n      b = j;\r\n    }\r\n\r\n    // Initialise coefficient array of result with zeros.\r\n    for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n    // Multiply.\r\n\r\n    // i is initially xc.length.\r\n    for (i = b; i--;) {\r\n      b = 0;\r\n\r\n      // a is yc.length.\r\n      for (j = a + i; j > i;) {\r\n\r\n        // Current sum of products at this digit position, plus carry.\r\n        b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n        c[j--] = b % 10;\r\n\r\n        // carry\r\n        b = b / 10 | 0;\r\n      }\r\n\r\n      c[j] = (c[j] + b) % 10;\r\n    }\r\n\r\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n    if (b) ++y.e;\r\n    else c.shift();\r\n\r\n    // Remove trailing zeros.\r\n    for (i = c.length; !c[--i];) c.pop();\r\n    y.c = c;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in exponential notation to dp fixed decimal\r\n   * places and rounded using Big.RM.\r\n   *\r\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n   */\r\n  P.toExponential = function (dp) {\r\n    return stringify(this, 1, dp, dp);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in normal notation to dp fixed decimal\r\n   * places and rounded using Big.RM.\r\n   *\r\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   */\r\n  P.toFixed = function (dp) {\r\n    return stringify(this, 2, dp, this.e + dp);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big rounded to sd significant digits using\r\n   * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * sd {number} Integer, 1 to MAX_DP inclusive.\r\n   */\r\n  P.toPrecision = function (sd) {\r\n    return stringify(this, 3, sd, sd - 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Omit the sign for negative zero.\r\n   */\r\n  P.toString = function () {\r\n    return stringify(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Include the sign for negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return stringify(this, 4);\r\n  };\r\n\r\n\r\n  // Export\r\n\r\n\r\n  Big = _Big_();\r\n\r\n  Big['default'] = Big.Big = Big;\r\n\r\n  //AMD.\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function () { return Big; });\r\n\r\n  // Node and other CommonJS-like environments that support module.exports.\r\n  } else if (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = Big;\r\n\r\n  //Browser.\r\n  } else {\r\n    GLOBAL.Big = Big;\r\n  }\r\n})(this);\r\n","'use strict';\n\nimport Big from 'big.js';\nimport {version} from '../package.json';\n\n// Create the local library object, to be exported or referenced globally later\nvar lib = {};\n\n// Current version\nlib.version = version;\n\n\n/* --- Exposed settings --- */\n\n// The library's settings configuration object. Contains default parameters for\n// currency and number formatting\nlib.settings = {\n  currency: {\n    symbol : '$',   // default currency symbol is '$'\n    format : '%s%v',  // controls output: %s = symbol, %v = value (can be object, see docs)\n    decimal : '.',    // decimal point separator\n    thousand : ',',   // thousands separator\n    precision : 2,    // decimal places\n    grouping : 3    // digit grouping (not implemented yet)\n  },\n  number: {\n    precision : 0,    // default precision on numbers is 0\n    grouping : 3,   // digit grouping (not implemented yet)\n    thousand : ',',\n    decimal : '.'\n  }\n};\n\n\n/* --- Internal Helper Methods --- */\n\n// Store reference to possibly-available ECMAScript 5 methods for later\nvar nativeMap = Array.prototype.map,\n  nativeIsArray = Array.isArray,\n  toString = Object.prototype.toString;\n\n/**\n * Tests whether supplied parameter is a string\n * from underscore.js\n */\nfunction isString(obj) {\n  return !!(obj === '' || (obj && obj.charCodeAt && obj.substr));\n}\n\n/**\n * Tests whether supplied parameter is an array\n * from underscore.js, delegates to ECMA5's native Array.isArray\n */\nfunction isArray(obj) {\n  return nativeIsArray ? nativeIsArray(obj) : toString.call(obj) === '[object Array]';\n}\n\n/**\n * Tests whether supplied parameter is a true object\n */\nfunction isObject(obj) {\n  return obj && toString.call(obj) === '[object Object]';\n}\n\n/**\n * Extends an object with a defaults object, similar to underscore's _.defaults\n *\n * Used for abstracting parameter handling from API methods\n */\nfunction defaults(object, defs) {\n  var key;\n  object = object || {};\n  defs = defs || {};\n  // Iterate over object non-prototype properties:\n  for (key in defs) {\n    if (defs.hasOwnProperty(key)) {\n      // Replace values with defaults only if undefined (allow empty/zero values):\n      if (object[key] == null) object[key] = defs[key];\n    }\n  }\n  return object;\n}\n\n/**\n * Implementation of `Array.map()` for iteration loops\n *\n * Returns a new Array as a result of calling `iterator` on each array value.\n * Defers to native Array.map if available\n */\nfunction map(obj, iterator, context) {\n  var results = [], i, j;\n\n  if (!obj) return results;\n\n  // Use native .map method if it exists:\n  if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);\n\n  // Fallback for native .map:\n  for (i = 0, j = obj.length; i < j; i++ ) {\n    results[i] = iterator.call(context, obj[i], i, obj);\n  }\n  return results;\n}\n\n/**\n * Check and normalise the value of precision (must be positive integer)\n */\nfunction checkPrecision(val, base) {\n  val = Math.round(Math.abs(val));\n  return isNaN(val)? base : val;\n}\n\n\n/**\n * Parses a format string or object and returns format obj for use in rendering\n *\n * `format` is either a string with the default (positive) format, or object\n * containing `pos` (required), `neg` and `zero` values (or a function returning\n * either a string or object)\n *\n * Either string or format.pos must contain \"%v\" (value) to be valid\n */\nfunction checkCurrencyFormat(format) {\n  var defaults = lib.settings.currency.format;\n\n  // Allow function as format parameter (should return string or object):\n  if ( typeof format === 'function' ) format = format();\n\n  // Format can be a string, in which case `value` (\"%v\") must be present:\n  if ( isString( format ) && format.match('%v') ) {\n\n    // Create and return positive, negative and zero formats:\n    return {\n      pos : format,\n      neg : format.replace('-', '').replace('%v', '-%v'),\n      zero : format\n    };\n\n    // If no format, or object is missing valid positive value, use defaults:\n  } else if ( !format || !format.pos || !format.pos.match('%v') ) {\n\n    // If defaults is a string, casts it to an object for faster checking next time:\n    return ( !isString( defaults ) ) ? defaults : lib.settings.currency.format = {\n      pos : defaults,\n      neg : defaults.replace('%v', '-%v'),\n      zero : defaults\n    };\n\n  }\n  // Otherwise, assume format was fine:\n  return format;\n}\n\n\n/* --- API Methods --- */\n\n/**\n * Takes a string/array of strings, removes all formatting/cruft and returns the raw float value\n * Alias: `accounting.parseBig(string)`\n *\n * Decimal must be included in the regular expression to match floats (defaults to\n * accounting.settings.number.decimal), so if the number uses a non-standard decimal \n * separator, provide it as the second argument.\n *\n * Also matches bracketed negatives (eg. \"$ (1.99)\" => -1.99)\n *\n * Doesn't throw any errors (`NaN`s become 0) but this may change in future\n *\n * @return {Big}\n */\nfunction unformatBig(value, decimal) {\n  // Recursively unformat arrays:\n  if (isArray(value)) {\n    return map(value, function(val) {\n      return unformatBig(val, decimal);\n    });\n  }\n\n  // Fails silently (need decent errors):\n  value = value || 0;\n\n  // Return the value as-is if it's already a number:\n  try {\n    return new Big(value);\n  } catch(err) {}\n\n  // Default decimal point comes from settings, but could be set to eg. \",\" in opts:\n  decimal = decimal || lib.settings.number.decimal;\n\n  // Build regex to strip out everything except digits, decimal point and minus sign:\n  var regex = new RegExp('[^0-9-' + decimal + ']', ['g']);\n  var unformatted = `${value}`\n    .replace(/\\((?=\\d+)(.*)\\)/, '-$1') // replace bracketed values with negatives\n    .replace(regex, '')         // strip out any cruft\n    .replace(decimal, '.');      // make sure decimal point is standard\n\n  try {\n    return new Big(unformatted);\n  } catch (err) {\n    return new Big(0);\n  }\n}\n\nlib.unformatBig = unformatBig;\nlib.parseBig = unformatBig;\n\nfunction unformat(value, decimal) {\n  // Recursively unformat arrays:\n  if (isArray(value)) {\n    return map(value, function(val) {\n      return Number(unformatBig(val, decimal));\n    });\n  }\n\n  return Number(unformatBig(value, decimal));\n}\n\nlib.unformat = unformat;\nlib.parse = unformat;\n\n\n/**\n * Implementation of toFixed() that treats floats more like decimals\n *\n * Fixes binary rounding issues (eg. (0.615).toFixed(2) === \"0.61\") that present\n * problems for accounting- and finance-related software.\n */\nfunction toFixed(value, precision) {\n  precision = checkPrecision(precision, lib.settings.number.precision);\n\n  return unformatBig(value).toFixed(precision);\n}\n\nlib.toFixed = toFixed;\n\n/**\n * Format a number, with comma-separated thousands and custom precision/decimal places\n * Alias: `accounting.format()`\n *\n * Localise by overriding the precision and thousand / decimal separators\n * 2nd parameter `precision` can be an object matching `settings.number`\n */\nfunction formatNumber(number, precision, thousand, decimal) {\n  // Resursively format arrays:\n  if (isArray(number)) {\n    return map(number, function(val) {\n      return formatNumber(val, precision, thousand, decimal);\n    });\n  }\n\n  // Clean up number:\n  number = unformatBig(number);\n\n  // Build options object from second param (if object) or all params, extending defaults:\n  var opts = defaults(\n    (isObject(precision) ? precision : {\n      precision : precision,\n      thousand : thousand,\n      decimal : decimal\n    }),\n    lib.settings.number\n  );\n\n  // Clean up precision\n  var usePrecision = checkPrecision(opts.precision);\n\n  // Do some calc:\n  var negative = number.lt(0) ? '-' : '';\n  var numberParts = number.abs().toFixed(usePrecision).split('.');\n  var base = numberParts[0];\n\n  var result = negative;\n\n  // Add thousands commas\n  result = result + base.replace(/\\B(?=(\\d{3})+(?!\\d))/g, opts.thousand);\n\n  if (usePrecision) {\n    result += opts.decimal + numberParts[1];\n  }\n\n  return result;\n}\n\nlib.formatNumber = formatNumber;\nlib.format = formatNumber;\n\n\n/**\n * Format a number into currency\n *\n * Usage: accounting.formatMoney(number, symbol, precision, thousandsSep, decimalSep, format)\n * defaults: (0, \"$\", 2, \",\", \".\", \"%s%v\")\n *\n * Localise by overriding the symbol, precision, thousand / decimal separators and format\n * Second param can be an object matching `settings.currency` which is the easiest way.\n *\n * To do: tidy up the parameters\n */\nfunction formatMoney(number, symbol, precision, thousand, decimal, format) {\n  // Resursively format arrays:\n  if (isArray(number)) {\n    return map(number, function(val){\n      return formatMoney(val, symbol, precision, thousand, decimal, format);\n    });\n  }\n\n  // Clean up number:\n  number = unformatBig(number);\n\n  // Build options object from second param (if object) or all params, extending defaults:\n  var opts = defaults(\n    (isObject(symbol) ? symbol : {\n      symbol : symbol,\n      precision : precision,\n      thousand : thousand,\n      decimal : decimal,\n      format : format\n    }),\n    lib.settings.currency\n  );\n\n  // Check format (returns object with pos, neg and zero):\n  var formats = checkCurrencyFormat(opts.format);\n\n  // Choose which format to use for this value:\n  var useFormat = number.gt(0) ? formats.pos : number.lt(0) ? formats.neg : formats.zero;\n\n  // Return with currency symbol added:\n  return useFormat.replace('%s', opts.symbol).replace('%v', formatNumber(number.abs(), checkPrecision(opts.precision), opts.thousand, opts.decimal));\n}\n\nlib.formatMoney = formatMoney;\n\n\n/**\n * Format a list of numbers into an accounting column, padding with whitespace\n * to line up currency symbols, thousand separators and decimals places\n *\n * List should be an array of numbers\n * Second parameter can be an object containing keys that match the params\n *\n * Returns array of accouting-formatted number strings of same length\n *\n * NB: `white-space:pre` CSS rule is required on the list container to prevent\n * browsers from collapsing the whitespace in the output strings.\n */\nfunction formatColumn(list, symbol, precision, thousand, decimal, format) {\n  if (!list || !isArray(list)) return [];\n\n  // Build options object from second param (if object) or all params, extending defaults:\n  var opts = defaults(\n      (isObject(symbol) ? symbol : {\n        symbol : symbol,\n        precision : precision,\n        thousand : thousand,\n        decimal : decimal,\n        format : format\n      }),\n      lib.settings.currency\n    ),\n\n    // Check format (returns object with pos, neg and zero), only need pos for now:\n    formats = checkCurrencyFormat(opts.format),\n\n    // Whether to pad at start of string or after currency symbol:\n    padAfterSymbol = formats.pos.indexOf('%s') < formats.pos.indexOf('%v') ? true : false,\n\n    // Store value for the length of the longest string in the column:\n    maxLength = 0,\n\n    // Format the list according to options, store the length of the longest string:\n    formatted = map(list, function(val) {\n      if (isArray(val)) {\n        // Recursively format columns if list is a multi-dimensional array:\n        return lib.formatColumn(val, opts);\n      } else {\n        // Clean up the value\n        val = unformatBig(val);\n\n        // Choose which format to use for this value (pos, neg or zero):\n        var useFormat = val.gt(0) ? formats.pos : val.lt(0) ? formats.neg : formats.zero;\n\n        // Format this value, push into formatted list and save the length:\n        var fVal = useFormat.replace('%s', opts.symbol).replace('%v', formatNumber(val.abs(), checkPrecision(opts.precision), opts.thousand, opts.decimal));\n\n        if (fVal.length > maxLength) maxLength = fVal.length;\n        return fVal;\n      }\n    });\n\n  // Pad each number in the list and send back the column of numbers:\n  return map(formatted, function(val) {\n    // Only if this is a string (not a nested array, which would have already been padded):\n    if (isString(val) && val.length < maxLength) {\n      // Depending on symbol position, pad after symbol or at index 0:\n      return padAfterSymbol ? val.replace(opts.symbol, opts.symbol+(new Array(maxLength - val.length + 1).join(' '))) : (new Array(maxLength - val.length + 1).join(' ')) + val;\n    }\n    return val;\n  });\n}\n\nlib.formatColumn = formatColumn;\n\nexport default lib;\n"],"names":["define","this","lib","version","settings","nativeMap","Array","prototype","map","nativeIsArray","isArray","toString","Object","isString","obj","charCodeAt","substr","call","isObject","defaults","object","defs","key","hasOwnProperty","iterator","context","results","i","j","length","checkPrecision","val","base","Math","round","abs","isNaN","checkCurrencyFormat","format","currency","match","replace","pos","unformatBig","value","decimal","Big","err","number","regex","RegExp","unformatted","parseBig","unformat","Number","parse","toFixed","precision","formatNumber","thousand","opts","usePrecision","negative","lt","numberParts","split","result","formatMoney","symbol","formats","useFormat","gt","neg","zero","formatColumn","list","indexOf","fVal","maxLength","formatted","padAfterSymbol","join"],"mappings":"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"}